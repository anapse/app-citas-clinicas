openapi: 3.0.3
info:
  title: Sistema de Control de Citas - API
  description: |
    API REST para la gestión de citas médicas en clínica. 
    
    ## Características
    - Autenticación JWT con roles (admin, operador, doctor, paciente)
    - Gestión de especialidades con diferentes modos de reserva
    - Sistema de disponibilidad de horarios
    - Control de citas con validaciones de conflictos
    - Perfiles de doctores con especialidades
    
    ## Modos de Reserva
    - **SLOT**: Reserva por horarios específicos (ej: Endocrinología)
    - **REQUEST**: Solicitud previa, operador asigna horario (ej: Cardiología)
    - **WALKIN**: Atención por orden de llegada (ej: Pediatría)
    
  version: 1.0.0
  contact:
    name: Soporte API
    email: soporte@clinica.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api
    description: Servidor de desarrollo
  - url: https://tu-dominio.com/api
    description: Servidor de producción

tags:
  - name: Autenticación
    description: Registro, login y gestión de perfil
  - name: Doctores
    description: Gestión de doctores y perfiles médicos
  - name: Especialidades
    description: Gestión de especialidades médicas
  - name: Disponibilidad
    description: Consulta de horarios disponibles
  - name: Citas
    description: Gestión de citas médicas

paths:
  # =====================================
  # AUTENTICACIÓN
  # =====================================
  /auth/register:
    post:
      tags: [Autenticación]
      summary: Registrar nuevo usuario
      description: |
        Registra un nuevo usuario en el sistema. Los pacientes pueden auto-registrarse.
        Solo administradores pueden crear usuarios con otros roles.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [full_name, email, password]
              properties:
                full_name:
                  type: string
                  minLength: 2
                  maxLength: 150
                  example: "Dr. Juan Pérez"
                email:
                  type: string
                  format: email
                  example: "juan.perez@clinica.com"
                phone:
                  type: string
                  example: "+1-555-123-4567"
                dni:
                  type: string
                  example: "12345678"
                password:
                  type: string
                  minLength: 8
                  example: "MiPassword123"
                role:
                  type: string
                  enum: [admin, operador, doctor, paciente]
                  default: paciente
                  example: "doctor"
      responses:
        '201':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '409':
          description: Email o DNI ya registrado
        '400':
          description: Datos inválidos

  /auth/login:
    post:
      tags: [Autenticación]
      summary: Iniciar sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "admin@clinica.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Credenciales inválidas

  /auth/me:
    get:
      tags: [Autenticación]
      summary: Obtener perfil del usuario autenticado
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'

  # =====================================
  # ESPECIALIDADES
  # =====================================
  /specialties:
    get:
      tags: [Especialidades]
      summary: Obtener lista de especialidades
      parameters:
        - name: booking_mode
          in: query
          schema:
            type: string
            enum: [SLOT, REQUEST, WALKIN]
          description: Filtrar por modo de reserva
        - name: with_doctors
          in: query
          schema:
            type: boolean
          description: Incluir conteo de doctores
      responses:
        '200':
          description: Lista de especialidades
          content:
            application/json:
              schema:
                type: object
                properties:
                  specialties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Specialty'

    post:
      tags: [Especialidades]
      summary: Crear nueva especialidad
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, booking_mode]
              properties:
                name:
                  type: string
                  example: "Cardiología Pediátrica"
                booking_mode:
                  type: string
                  enum: [SLOT, REQUEST, WALKIN]
                  example: "REQUEST"
      responses:
        '201':
          description: Especialidad creada
        '409':
          description: Nombre ya existe

  /specialties/{id}:
    get:
      tags: [Especialidades]
      summary: Obtener especialidad por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Datos de la especialidad
          content:
            application/json:
              schema:
                type: object
                properties:
                  specialty:
                    $ref: '#/components/schemas/Specialty'
                  doctors:
                    type: array
                    items:
                      $ref: '#/components/schemas/DoctorProfile'

  # =====================================
  # DISPONIBILIDAD
  # =====================================
  /availability:
    get:
      tags: [Disponibilidad]
      summary: Consultar disponibilidad de horarios
      description: |
        Obtiene los slots disponibles para una especialidad en una fecha específica.
        
        - **SLOT**: Retorna horarios específicos disponibles
        - **WALKIN**: Retorna horarios generales de clínica
        - **REQUEST**: Indica que requiere solicitud previa
      parameters:
        - name: specialtyId
          in: query
          required: true
          schema:
            type: integer
          example: 2
        - name: doctorId
          in: query
          schema:
            type: integer
          example: 1
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
          example: "2025-08-25"
      responses:
        '200':
          description: Disponibilidad encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  specialty:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      booking_mode:
                        type: string
                  date:
                    type: string
                  available_slots:
                    type: array
                    items:
                      $ref: '#/components/schemas/AvailabilitySlot'
        '409':
          description: Especialidad no maneja reservas por horarios

  # =====================================
  # CITAS
  # =====================================
  /appointments:
    get:
      tags: [Citas]
      summary: Obtener citas con filtros
      security:
        - bearerAuth: []
      parameters:
        - name: from
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          schema:
            type: string
            format: date-time
        - name: doctorId
          in: query
          schema:
            type: integer
        - name: specialtyId
          in: query
          schema:
            type: integer
        - name: dni
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [booked, confirmed, checked_in, cancelled]
      responses:
        '200':
          description: Lista de citas
          content:
            application/json:
              schema:
                type: object
                properties:
                  appointments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'

    post:
      tags: [Citas]
      summary: Crear nueva cita
      description: |
        Crea una nueva cita médica. Validaciones incluidas:
        - Horario disponible según especialidad
        - Un paciente por día máximo
        - No solapamiento con doctor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [specialty_id, patient, start, end]
              properties:
                specialty_id:
                  type: integer
                  example: 2
                doctor_id:
                  type: integer
                  example: 1
                patient:
                  $ref: '#/components/schemas/PatientInfo'
                start:
                  type: string
                  format: date-time
                  example: "2025-08-25T17:00:00Z"
                end:
                  type: string
                  format: date-time
                  example: "2025-08-25T17:20:00Z"
      responses:
        '201':
          description: Cita creada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  appointment:
                    $ref: '#/components/schemas/Appointment'
        '409':
          description: Conflicto de horarios

  /appointments/{id}:
    delete:
      tags: [Citas]
      summary: Cancelar cita
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Cita cancelada
        '403':
          description: Sin permisos para cancelar

  # =====================================
  # DOCTORES
  # =====================================
  /doctors:
    get:
      tags: [Doctores]
      summary: Obtener lista de doctores
      parameters:
        - name: specialtyId
          in: query
          schema:
            type: integer
        - name: visible
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Lista de doctores
          content:
            application/json:
              schema:
                type: object
                properties:
                  doctors:
                    type: array
                    items:
                      $ref: '#/components/schemas/DoctorProfile'

# =====================================
# COMPONENTES REUTILIZABLES
# =====================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        full_name:
          type: string
          example: "Dr. Juan Pérez"
        email:
          type: string
          example: "juan.perez@clinica.com"
        phone:
          type: string
          example: "+1-555-123-4567"
        dni:
          type: string
          example: "12345678"
        role:
          type: string
          enum: [admin, operador, doctor, paciente]
          example: "doctor"
        created_at:
          type: string
          format: date-time

    Specialty:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Endocrinología Pediátrica"
        booking_mode:
          type: string
          enum: [SLOT, REQUEST, WALKIN]
          example: "SLOT"
        doctor_count:
          type: integer
          example: 2
        created_at:
          type: string
          format: date-time

    DoctorProfile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        display_name:
          type: string
          example: "Dra. María González"
        full_name:
          type: string
          example: "María Elena González López"
        title_prefix:
          type: string
          example: "Dra."
        description_short:
          type: string
          example: "Especialista en Endocrinología Pediátrica"
        photo_url:
          type: string
          nullable: true
        has_image:
          type: boolean
        primary_specialty_name:
          type: string
          example: "Endocrinología Pediátrica"

    AvailabilitySlot:
      type: object
      properties:
        start:
          type: string
          format: date-time
          example: "2025-08-25T17:00:00Z"
        end:
          type: string
          format: date-time
          example: "2025-08-25T17:20:00Z"
        capacity:
          type: integer
          example: 1
        taken:
          type: integer
          example: 0
        available:
          type: integer
          example: 1
        doctorId:
          type: integer
          nullable: true
          example: 1

    PatientInfo:
      type: object
      required: [name, dni, birthdate]
      properties:
        name:
          type: string
          example: "Ana María Rodríguez"
        dni:
          type: string
          example: "87654321"
        birthdate:
          type: string
          format: date
          example: "2010-05-15"
        phone:
          type: string
          example: "+1-555-987-6543"

    Appointment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        specialty:
          type: object
          properties:
            id:
              type: integer
              example: 2
            name:
              type: string
              example: "Endocrinología Pediátrica"
        doctor:
          type: object
          nullable: true
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "Dra. María González"
        patient:
          $ref: '#/components/schemas/PatientInfo'
        datetime:
          type: object
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
        status:
          type: string
          enum: [booked, confirmed, checked_in, cancelled]
          example: "booked"
        created_at:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Descripción del error"
        code:
          type: string
          example: "ERROR_CODE"
        details:
          oneOf:
            - type: string
            - type: array
            - type: object

# =====================================
# EJEMPLOS DE RESPUESTAS
# =====================================
  responses:
    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Recurso no encontrado"
            code: "NOT_FOUND"

    Unauthorized:
      description: No autorizado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Token de acceso requerido"
            code: "MISSING_TOKEN"

    ValidationError:
      description: Error de validación
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Datos de entrada inválidos"
            code: "VALIDATION_ERROR"
            details:
              - field: "email"
                message: "Email inválido"
                value: "invalid-email"
