-- Script completo CORREGIDO para actualizar datos seg√∫n especificaciones del jefe
-- Ejecutar en SSMS del VPS
USE CitasMedicas;
GO

-- LIMPIAR DATOS EXISTENTES (en orden correcto por dependencias)
PRINT 'üîÑ Limpiando datos existentes...';

-- Deshabilitar constraints temporalmente para limpiar
DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql = @sql + 'ALTER TABLE ' + TABLE_SCHEMA + '.' + TABLE_NAME + ' NOCHECK CONSTRAINT ALL;' + CHAR(13)
FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';
EXEC sp_executesql @sql;

-- Limpiar tablas en orden seguro
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Historial_Citas')
    DELETE FROM Historial_Citas;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Citas')
    DELETE FROM Citas;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Horarios_Doctores')
    DELETE FROM Horarios_Doctores;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Doctor_Especialidades')
    DELETE FROM Doctor_Especialidades;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Doctores')
    DELETE FROM Doctores;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Pacientes')
    DELETE FROM Pacientes;
DELETE FROM Usuarios WHERE id > 0;
DELETE FROM Especialidades WHERE id > 0;
DELETE FROM Estados_Citas WHERE id > 0;
DELETE FROM Roles WHERE id > 0;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Configuraciones')
    DELETE FROM Configuraciones;

-- Resetear contadores de identidad
DBCC CHECKIDENT ('Usuarios', RESEED, 0);
DBCC CHECKIDENT ('Roles', RESEED, 0);
DBCC CHECKIDENT ('Especialidades', RESEED, 0);
DBCC CHECKIDENT ('Estados_Citas', RESEED, 0);
DBCC CHECKIDENT ('Doctores', RESEED, 0);
DBCC CHECKIDENT ('Pacientes', RESEED, 0);
DBCC CHECKIDENT ('Horarios_Doctores', RESEED, 0);
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Citas')
    DBCC CHECKIDENT ('Citas', RESEED, 0);
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Doctor_Especialidades')
    DBCC CHECKIDENT ('Doctor_Especialidades', RESEED, 0);

-- Rehabilitar constraints
SET @sql = '';
SELECT @sql = @sql + 'ALTER TABLE ' + TABLE_SCHEMA + '.' + TABLE_NAME + ' WITH CHECK CHECK CONSTRAINT ALL;' + CHAR(13)
FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';
EXEC sp_executesql @sql;

PRINT '‚úÖ Datos limpiados exitosamente';

-- CREAR/ACTUALIZAR ESTRUCTURA SI ES NECESARIO
PRINT 'üîÑ Verificando estructura de tablas...';

-- Crear tabla Doctor_Especialidades si no existe
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Doctor_Especialidades')
BEGIN
    CREATE TABLE Doctor_Especialidades (
        id INT IDENTITY(1,1) PRIMARY KEY,
        doctor_id INT NOT NULL,
        especialidad_id INT NOT NULL,
        activo BIT DEFAULT 1,
        fecha_creacion DATETIME2 DEFAULT GETDATE(),
        FOREIGN KEY (doctor_id) REFERENCES Doctores(id),
        FOREIGN KEY (especialidad_id) REFERENCES Especialidades(id),
        UNIQUE(doctor_id, especialidad_id)
    );
    PRINT '‚úÖ Tabla Doctor_Especialidades creada';
END

-- Agregar columnas nuevas a Especialidades si no existen
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Especialidades' AND COLUMN_NAME = 'modalidad_reserva')
BEGIN
    ALTER TABLE Especialidades ADD modalidad_reserva NVARCHAR(20) DEFAULT 'SLOT';
    PRINT '‚úÖ Columna modalidad_reserva agregada';
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Especialidades' AND COLUMN_NAME = 'puede_paciente_reservar')
BEGIN
    ALTER TABLE Especialidades ADD puede_paciente_reservar BIT DEFAULT 1;
    PRINT '‚úÖ Columna puede_paciente_reservar agregada';
END

-- Agregar especialidad_id a Horarios_Doctores si no existe
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Horarios_Doctores' AND COLUMN_NAME = 'especialidad_id')
BEGIN
    ALTER TABLE Horarios_Doctores ADD especialidad_id INT NULL;
    -- No agregamos la foreign key ahora porque primero necesitamos datos
    PRINT '‚úÖ Columna especialidad_id agregada a Horarios_Doctores';
END

PRINT '‚úÖ Estructura verificada y actualizada';
GO

-- INSERTAR NUEVOS DATOS SEG√öN ESPECIFICACIONES DEL JEFE
PRINT 'üîÑ Insertando nuevos datos seg√∫n especificaciones del jefe...';

-- 1. ROLES DEL SISTEMA
INSERT INTO Roles (nombre, descripcion, permisos) VALUES
('Administrador', 'Acceso completo - puede hacer todo: eliminar, editar, crear', '{"all": true}'),
('Moderador', 'Secretaria/Operador - gestiona citas para especialidades restringidas, puede agregar/quitar horarios', '{"citas": ["create", "read", "update", "delete"], "horarios": ["create", "read", "update", "delete"], "doctores": ["read"], "pacientes": ["create", "read", "update"], "especialidades_restringidas": true}'),
('Doctor', 'Solo puede editar sus propias citas, crear/editar/borrar sus citas y horarios', '{"citas": ["create", "read", "update", "delete"], "horarios": ["create", "read", "update", "delete"], "pacientes": ["read"], "solo_propias": true}'),
('Paciente', 'P√∫blico - puede crear m√°ximo 1 cita por d√≠a, puede eliminar sus citas', '{"citas": ["create", "read", "delete"], "pacientes": ["read", "update"], "max_citas_dia": 1, "publico": true}');

PRINT '‚úÖ Roles insertados';

-- 2. ESTADOS DE CITAS
INSERT INTO Estados_Citas (nombre, descripcion, color) VALUES
('Programada', 'Cita programada por paciente', '#007bff'),
('Confirmada', 'Cita confirmada por operador/doctor', '#28a745'),
('En Proceso', 'Paciente siendo atendido', '#ffc107'),
('Completada', 'Cita finalizada exitosamente', '#28a745'),
('Cancelada', 'Cita cancelada', '#dc3545'),
('No Asisti√≥', 'Paciente no se present√≥', '#6c757d'),
('Solicitud Pendiente', 'Solicitud esperando coordinaci√≥n', '#17a2b8');

PRINT '‚úÖ Estados de citas insertados';

-- 3. ESPECIALIDADES SEG√öN EL JEFE
INSERT INTO Especialidades (nombre, descripcion, duracion_cita_minutos, modalidad_reserva, requiere_moderador, horario_por_defecto, activo, puede_paciente_reservar) VALUES

-- ENDOCRINOLOG√çA PEDI√ÅTRICA (SLOT - Paciente puede reservar)
('Endocrinolog√≠a Pedi√°trica', 
 'Endocrinolog√≠a pedi√°trica - Mi√©rcoles 5:00 PM a 6:00 PM (llegar 10 minutos antes de la cita agendada)', 
 20, 'SLOT', 0, 
 '{"dias": [3], "horarios": [{"inicio": "17:00", "fin": "18:00"}]}', 
 1, 1),

-- PEDIATR√çA (WALKIN - Sin reservas, solo orden de llegada)
('Pediatr√≠a', 
 'Pediatr√≠a es la √∫nica especialidad que la atenci√≥n es por orden de llegada, no se saca cita previa. Horario de cl√≠nica: Lunes a s√°bado 8:00am-1:00pm y 3:00pm-7:00pm, Domingo 9:00am-1:00pm', 
 0, 'WALKIN', 0, 
 '{"lun_sab": {"manana": "08:00-13:00", "tarde": "15:00-19:00"}, "domingo": {"manana": "09:00-13:00"}}', 
 1, 0),

-- DERMATOLOG√çA (SLOT - Paciente puede reservar)
('Dermatolog√≠a', 
 'Dermatolog√≠a - Jueves 3:00 PM (llegar 10 minutos antes de la cita agendada)', 
 20, 'SLOT', 0, 
 '{"dias": [4], "horarios": [{"inicio": "15:00", "fin": "16:00"}]}', 
 1, 1),

-- NEUMOLOG√çA E INMUNOLOG√çA PEDI√ÅTRICA (REQUEST - Solo moderador)
('Neumolog√≠a e Inmunolog√≠a Pedi√°trica', 
 'M√©dicos de Lima - Fechas espec√≠ficas 1 vez o 2 veces al mes. Cuando confirmen fecha se activa reserva. Solo operador coordina.', 
 30, 'REQUEST', 1, 
 '{}', 
 1, 0),

-- OTRAS ESPECIALIDADES QUE REQUIEREN COORDINACI√ìN (REQUEST)
('Cardiolog√≠a', 
 'Requiere coordinaci√≥n previa - Solo enviar datos para contacto posterior', 
 30, 'REQUEST', 1, 
 '{}', 
 1, 0),

('Neurolog√≠a', 
 'Requiere coordinaci√≥n previa - Solo enviar datos para contacto posterior', 
 45, 'REQUEST', 1, 
 '{}', 
 1, 0),

('Oftalmolog√≠a', 
 'Requiere coordinaci√≥n previa - Solo enviar datos para contacto posterior', 
 30, 'REQUEST', 1, 
 '{}', 
 1, 0),

('Psicolog√≠a', 
 'Requiere coordinaci√≥n previa - Solo enviar datos para contacto posterior', 
 60, 'REQUEST', 1, 
 '{}', 
 1, 0);

PRINT '‚úÖ Especialidades insertadas seg√∫n especificaciones del jefe';

-- 4. USUARIOS DEL SISTEMA
-- Usuario administrador
INSERT INTO Usuarios (nombre, apellido, email, telefono, password_hash, rol_id) VALUES
('Admin', 'Sistema', 'admin@clinica.com', '1234567890', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 1); -- password: password

-- Moderador/Operador (Secretaria)
INSERT INTO Usuarios (nombre, apellido, email, telefono, password_hash, rol_id) VALUES
('Ana', 'Operadora', 'operador@clinica.com', '1234567895', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 2); -- password: password

-- Doctores seg√∫n especialidades del jefe
INSERT INTO Usuarios (nombre, apellido, email, telefono, password_hash, rol_id) VALUES
('Dr. Luis', 'Endocrin√≥logo Pedi√°trico', 'dr.endocrino@clinica.com', '987654321', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 3), -- password: password
('Dr. Pediatra', 'General', 'dr.pediatra@clinica.com', '987654322', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 3), -- password: password
('Dra. Carmen', 'Dermat√≥loga', 'dra.dermatologa@clinica.com', '987654323', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 3), -- password: password
('Dr. Alberto', 'Neum√≥logo Inmun√≥logo', 'dr.neumologo@clinica.com', '987654324', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 3); -- password: password

PRINT '‚úÖ Usuarios insertados';

-- 5. DOCTORES (Relacionar usuarios con especialidades)
INSERT INTO Doctores (usuario_id, especialidad_id, numero_licencia, biografia) VALUES
(3, 1, 'LIC001', 'Especialista en Endocrinolog√≠a Pedi√°trica - Mi√©rcoles 5:00-6:00 PM'),
(4, 2, 'LIC002', 'Pediatra General - Atenci√≥n por orden de llegada'),
(5, 3, 'LIC003', 'Dermat√≥loga - Jueves 3:00 PM'),
(6, 4, 'LIC004', 'Neum√≥logo e Inmun√≥logo Pedi√°trico - M√©dico de Lima');

PRINT '‚úÖ Doctores insertados';

-- 6. HORARIOS POR DEFECTO SEG√öN ESPECIFICACIONES DEL JEFE
-- Dr. Luis - Endocrinolog√≠a Pedi√°trica (Mi√©rcoles 5:00-6:00 PM)
INSERT INTO Horarios_Doctores (doctor_id, especialidad_id, dia_semana, hora_inicio, hora_fin, es_horario_defecto) VALUES
(1, 1, 3, '17:00', '18:00', 1); -- Mi√©rcoles 5:00-6:00 PM

-- Dr. Pediatra - Pediatr√≠a (Horario de cl√≠nica completo)
INSERT INTO Horarios_Doctores (doctor_id, especialidad_id, dia_semana, hora_inicio, hora_fin, es_horario_defecto) VALUES
(2, 2, 1, '08:00', '13:00', 1), (2, 2, 1, '15:00', '19:00', 1), -- Lunes
(2, 2, 2, '08:00', '13:00', 1), (2, 2, 2, '15:00', '19:00', 1), -- Martes
(2, 2, 3, '08:00', '13:00', 1), (2, 2, 3, '15:00', '19:00', 1), -- Mi√©rcoles
(2, 2, 4, '08:00', '13:00', 1), (2, 2, 4, '15:00', '19:00', 1), -- Jueves
(2, 2, 5, '08:00', '13:00', 1), (2, 2, 5, '15:00', '19:00', 1), -- Viernes
(2, 2, 6, '08:00', '13:00', 1), (2, 2, 6, '15:00', '19:00', 1), -- S√°bado
(2, 2, 7, '09:00', '13:00', 1); -- Domingo

-- Dra. Carmen - Dermatolog√≠a (Jueves 3:00-4:00 PM)
INSERT INTO Horarios_Doctores (doctor_id, especialidad_id, dia_semana, hora_inicio, hora_fin, es_horario_defecto) VALUES
(3, 3, 4, '15:00', '16:00', 1); -- Jueves 3:00-4:00 PM

-- Dr. Alberto - Neumolog√≠a (Sin horarios fijos - fechas espec√≠ficas)
-- Se agregar√°n horarios espec√≠ficos cuando confirmen fechas desde Lima

PRINT '‚úÖ Horarios por defecto insertados';

-- Agregar foreign key constraint ahora que tenemos datos
IF NOT EXISTS (
    SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS 
    WHERE CONSTRAINT_NAME = 'FK_Horarios_Doctores_Especialidades'
)
BEGIN
    ALTER TABLE Horarios_Doctores 
    ADD CONSTRAINT FK_Horarios_Doctores_Especialidades 
    FOREIGN KEY (especialidad_id) REFERENCES Especialidades(id);
    PRINT '‚úÖ Foreign key constraint agregada';
END

-- 7. PACIENTES DE EJEMPLO
INSERT INTO Pacientes (nombre, apellido, email, telefono, fecha_nacimiento, documento_identidad) VALUES
('Ana Mar√≠a', 'P√©rez Gonz√°lez', 'anamaria.perez@email.com', '987654321', '2015-05-15', '12345678'),
('Carlos Eduardo', 'L√≥pez Mart√≠nez', 'carlos.lopez@email.com', '987654322', '2018-08-22', '87654321'),
('Sof√≠a Isabel', 'Ram√≠rez Torres', 'sofia.ramirez@email.com', '987654323', '2020-12-10', '11223344'),
('Miguel Angel', 'Garc√≠a Vargas', 'miguel.garcia@email.com', '987654324', '2012-03-08', '44332211');

PRINT '‚úÖ Pacientes de ejemplo insertados';

-- 8. CONFIGURACIONES DEL SISTEMA
INSERT INTO Configuraciones (clave, valor, descripcion, tipo_dato) VALUES
('horario_clinica_lun_sab_manana_inicio', '08:00', 'Lunes a s√°bado - Hora inicio ma√±ana', 'string'),
('horario_clinica_lun_sab_manana_fin', '13:00', 'Lunes a s√°bado - Hora fin ma√±ana', 'string'),
('horario_clinica_lun_sab_tarde_inicio', '15:00', 'Lunes a s√°bado - Hora inicio tarde', 'string'),
('horario_clinica_lun_sab_tarde_fin', '19:00', 'Lunes a s√°bado - Hora fin tarde', 'string'),
('horario_clinica_domingo_inicio', '09:00', 'Domingo - Hora inicio', 'string'),
('horario_clinica_domingo_fin', '13:00', 'Domingo - Hora fin', 'string'),
('endocrinologia_dia', '3', 'Endocrinolog√≠a - D√≠a de atenci√≥n (3=Mi√©rcoles)', 'number'),
('endocrinologia_hora_inicio', '17:00', 'Endocrinolog√≠a - Hora inicio', 'string'),
('endocrinologia_hora_fin', '18:00', 'Endocrinolog√≠a - Hora fin', 'string'),
('dermatologia_dia', '4', 'Dermatolog√≠a - D√≠a de atenci√≥n (4=Jueves)', 'number'),
('dermatologia_hora_inicio', '15:00', 'Dermatolog√≠a - Hora inicio', 'string'),
('dermatologia_hora_fin', '16:00', 'Dermatolog√≠a - Hora fin', 'string'),
('max_citas_paciente_dia', '1', 'M√°ximo citas por paciente por d√≠a', 'number'),
('tiempo_llegada_anticipada', '10', 'Minutos de llegada anticipada recomendada', 'number'),
('notificaciones_email', 'true', 'Enviar notificaciones por email', 'boolean'),
('sistema_publico', 'true', 'Sistema abierto al p√∫blico para crear citas', 'boolean');

PRINT '‚úÖ Configuraciones insertadas';

-- VERIFICAR INSERCI√ìN DE DATOS
DECLARE @RolesCount INT, @EstadosCount INT, @EspecialidadesCount INT, @UsuariosCount INT;
DECLARE @DoctoresCount INT, @HorariosCount INT, @PacientesCount INT, @ConfiguracionesCount INT;

SELECT @RolesCount = COUNT(*) FROM Roles;
SELECT @EstadosCount = COUNT(*) FROM Estados_Citas;
SELECT @EspecialidadesCount = COUNT(*) FROM Especialidades;
SELECT @UsuariosCount = COUNT(*) FROM Usuarios;
SELECT @DoctoresCount = COUNT(*) FROM Doctores;
SELECT @HorariosCount = COUNT(*) FROM Horarios_Doctores;
SELECT @PacientesCount = COUNT(*) FROM Pacientes;
SELECT @ConfiguracionesCount = COUNT(*) FROM Configuraciones;

PRINT '';
PRINT 'üìä RESUMEN DE DATOS INSERTADOS:';
PRINT 'Roles: ' + CAST(@RolesCount AS VARCHAR(10));
PRINT 'Estados de citas: ' + CAST(@EstadosCount AS VARCHAR(10));
PRINT 'Especialidades: ' + CAST(@EspecialidadesCount AS VARCHAR(10));
PRINT 'Usuarios: ' + CAST(@UsuariosCount AS VARCHAR(10));
PRINT 'Doctores: ' + CAST(@DoctoresCount AS VARCHAR(10));
PRINT 'Horarios: ' + CAST(@HorariosCount AS VARCHAR(10));
PRINT 'Pacientes: ' + CAST(@PacientesCount AS VARCHAR(10));
PRINT 'Configuraciones: ' + CAST(@ConfiguracionesCount AS VARCHAR(10));

PRINT '';
PRINT '‚úÖ DATOS ACTUALIZADOS EXITOSAMENTE SEG√öN ESPECIFICACIONES DEL JEFE';
PRINT '';
PRINT 'üîê CREDENCIALES DE ACCESO:';
PRINT 'Admin: admin@clinica.com / password';
PRINT 'Operador: operador@clinica.com / password';
PRINT 'Dr. Endocrino: dr.endocrino@clinica.com / password';
PRINT 'Dr. Pediatra: dr.pediatra@clinica.com / password';
PRINT 'Dra. Dermat√≥loga: dra.dermatologa@clinica.com / password';
PRINT 'Dr. Neum√≥logo: dr.neumologo@clinica.com / password';
PRINT '';
PRINT 'üè• ESPECIALIDADES CONFIGURADAS:';
PRINT '‚Ä¢ Endocrinolog√≠a Pedi√°trica: Mi√©rcoles 5:00-6:00 PM (SLOT - Paciente puede reservar)';
PRINT '‚Ä¢ Pediatr√≠a: Orden de llegada (WALKIN - Sin reservas)';
PRINT '‚Ä¢ Dermatolog√≠a: Jueves 3:00 PM (SLOT - Paciente puede reservar)';
PRINT '‚Ä¢ Neumolog√≠a e Inmunolog√≠a: Fechas espec√≠ficas (REQUEST - Solo operador)';
PRINT '‚Ä¢ Otras especialidades: Coordinaci√≥n previa (REQUEST - Solo operador)';
PRINT '';
PRINT 'üìã DATOS PACIENTE REQUERIDOS:';
PRINT '1Ô∏è‚É£ Nombres y Apellidos del Paciente';
PRINT '2Ô∏è‚É£ N√∫mero de DNI del Paciente o Apoderado';
PRINT '3Ô∏è‚É£ Fecha de Nacimiento del Paciente';  
PRINT '4Ô∏è‚É£ N√∫mero de Contacto';
PRINT '';
PRINT '‚ö†Ô∏è  RECORDATORIO: Llegar 10 minutos antes de la cita agendada';
PRINT '';
PRINT 'üéâ SISTEMA LISTO PARA USAR EN PRODUCCI√ìN';
GO
